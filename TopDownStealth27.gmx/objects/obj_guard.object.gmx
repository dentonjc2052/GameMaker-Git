<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_collision</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(obj_guard_controller)) {instance_create(0,0, obj_guard_controller)};
path = path_add();

skin = instance_create (x, y, obj_guard_skin);
skin.parent = id;
// the skins parent is the id of the guard this create event pertains to

detection_rad_3 = 150;
detection_rad_2 = 100;
detection_rad_1 = 50;
detection_rad_0 = 15;

//returning = false;

sight_cone_left = 60;
sight_cone_right = -60;

investigate_x = 0;
investigate_y = 0;

return_x = x;
return_y = y;

return_to_x = return_x;
return_to_y = return_y;

//this is the create event so X and Y are the starting points - not dynam updated points


investigating = false;
alarmed = false;
conscious = true;


move_speed = 0.5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>conscious = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scr_enemy_return();
//returning = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (conscious = true)
{
skin.image_alpha = 1.0;

//states nested within state of consciousness... if conscious, if enemy see player, go run a 
//script. that script sets alarme and investigating to true, changes image angle, sets
//investigate position - and calls enemy investigate script - which references the
//grid, populates obstacles, draws path with an endpoint populated with x,y from the
// script above. sets alarm to off enemy return - so it'll only puruse over that period

    if (scr_enemy_see_player() &amp;&amp; obj_player.hidden = false) 
    {
        alarmed = true;
        skin.image_angle = point_direction(x, y, obj_player.x, obj_player.y);
        investigate_x = obj_player.x;
        investigate_y = obj_player.y;
        //maybe here you could have it flash last known location...
        scr_enemy_investigate();
        investigating = true;         
    //path_end();
    }

    else 
    {
        alarmed = false;
        skin.image_angle = direction;
        //skin image angle face the direction of the enemy object - pin 2 together
    }

//so alarmed is the canary - if alarmed being on / true means wont pursue a sound
// while engaged in a line of sight chase.... see and hear - both invoke enemy investigate
//script - both turn investigating to true.  but alarmed on gates a chase for sound while 
//otherwise chasing a seen enemy
    
    
    if (scr_enemy_hear_something() and !alarmed) 
    {
      scr_enemy_investigate();
        investigating = true;
    }    
    
//else {investigating = false};

// skin.image_angle = direction;

// if ive done a path, and im at the end but have been investigating, 
// wait 3 seconds until returning to start, and set investigating to false




//if im at the end of my plotted path to any sound - which means if a path is plotted by you drag an enemy
// through line of sight off to another point - does that equal end of path and do they then return...?

    if(path_position == 1)
    {
        if(investigating)
        {
            alarm[0] = 180;
            investigating = false;
        }   
    }
  
}

//path_position 0 = start , 1 = end
else
{
    if(path_position != 1) {path_end()};
    alarm[0] = 10;
    skin.image_alpha = 0.2;
    investigating = false;
    
}
//if (investigating)
//{
//    skin.image_angle = point_direction(x, y, investigate_x, investigate_y);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (point_distance(x, y, obj_player.x, obj_player.y) &lt; obj_player.reach)
{
    if (!alarmed)
    {
        conscious = false;
        alarm[1] = 500;
        // alarm 1 is while out.... then wakes and comes to for another 180 
        // which is alarm[0]
    }
} 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_circle (x, y, detection_rad_3, true);
draw_circle (x, y, detection_rad_2, true);
draw_circle (x, y, detection_rad_1, true);
draw_circle (x, y, detection_rad_0, true);



draw_text(obj_guard.x + 10, obj_guard.y + 10, alarmed);
draw_text(obj_guard.x + 10, obj_guard.y + 25, investigating);
//draw_text(obj_guard.x + 10, obj_guard.y + 40, returning);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
